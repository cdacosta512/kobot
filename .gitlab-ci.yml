# --- Default job that came with the GitLab project when it was first created.
include:
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  SECRET_DETECTION_ENABLED: 'true'
  GIT_DEPTH: "0"

stages:
  - test
  - secret-detection
  - release
  - build
  - publish

secret_detection:
  stage: secret-detection

# -----------------------------
# 1. Semantic-release versioning
# -----------------------------
semantic_release:
  image: node:24
  stage: release
  before_script:
    - git fetch --tags
  script:
    - npm ci
    - npx semantic-release
    - |
      if [ -n "$SEMANTIC_RELEASE_NEXT_RELEASE_VERSION" ]; then
        echo "NEXT_RELEASE_VERSION=v${SEMANTIC_RELEASE_NEXT_RELEASE_VERSION}" > .env
      else
        echo "NEXT_RELEASE_VERSION=UNSET" > .env
      fi
    - echo "Release version written to .env:"
    - cat .env
  artifacts:
    reports:
      dotenv: .env
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'


# -----------------------------
# 2. Build multi-platform binaries
# -----------------------------
build_binaries:
  image: golang:1.25
  stage: build
  needs: ["semantic_release"]
  before_script:
    - apt-get update && apt-get install -y bash zip tar jq
    - |
      if [ -f .env ]; then
        source .env
      fi

      if [ "$NEXT_RELEASE_VERSION" = "UNSET" ] || [ -z "$NEXT_RELEASE_VERSION" ]; then
        echo "WARN: release version not set, using last known tag"
        NEXT_RELEASE_VERSION=$(git describe --tags --abbrev=0)
      fi

      echo "Using NEXT_RELEASE_VERSION=$NEXT_RELEASE_VERSION"
  script:
    - echo "Building Kobot version $NEXT_RELEASE_VERSION"
    - mkdir -p dist
    - GOOS=linux   GOARCH=amd64 go build -ldflags="-s -w -X=gitlab.com/kobot/kobot/cmd.CliVersion=${NEXT_RELEASE_VERSION}" -o dist/kobot-${NEXT_RELEASE_VERSION}-linux-amd64
    - GOOS=linux   GOARCH=arm64 go build -ldflags="-s -w -X=gitlab.com/kobot/kobot/cmd.CliVersion=${NEXT_RELEASE_VERSION}" -o dist/kobot-${NEXT_RELEASE_VERSION}-linux-arm64
    - GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X=gitlab.com/kobot/kobot/cmd.CliVersion=${NEXT_RELEASE_VERSION}" -o dist/kobot-${NEXT_RELEASE_VERSION}-windows-amd64.exe
    - GOOS=darwin  GOARCH=amd64 go build -ldflags="-s -w -X=gitlab.com/kobot/kobot/cmd.CliVersion=${NEXT_RELEASE_VERSION}" -o dist/kobot-${NEXT_RELEASE_VERSION}-darwin-amd64
    - cd dist
    - zip kobot-${NEXT_RELEASE_VERSION}-windows-amd64.zip kobot-${NEXT_RELEASE_VERSION}-windows-amd64.exe
    - tar -czf kobot-${NEXT_RELEASE_VERSION}-linux-amd64.tar.gz kobot-${NEXT_RELEASE_VERSION}-linux-amd64
    - tar -czf kobot-${NEXT_RELEASE_VERSION}-linux-arm64.tar.gz kobot-${NEXT_RELEASE_VERSION}-linux-arm64
    - tar -czf kobot-${NEXT_RELEASE_VERSION}-darwin-amd64.tar.gz kobot-${NEXT_RELEASE_VERSION}-darwin-amd64
    - rm kobot-${NEXT_RELEASE_VERSION}-linux-* kobot-${NEXT_RELEASE_VERSION}-darwin-* kobot-${NEXT_RELEASE_VERSION}-windows-*.exe
    - sha256sum * > checksums-${NEXT_RELEASE_VERSION}.txt
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# -----------------------------
# 3. Publish release assets to GitLab.com
# -----------------------------
publish_release:
  image: curlimages/curl:8.5.0
  stage: publish
  needs: ["build_binaries"]
  before_script:
    - apk add --no-cache bash jq
  script:
    - |
      set -euo pipefail
      if [ ! -f .env ]; then
        echo "ERROR: .env not found. Did semantic_release run?"
        exit 1
      fi
      source .env
      echo "Attaching binaries for $NEXT_RELEASE_VERSION to GitLab.com release"

      for file in dist/*; do
        echo "Uploading $file..."
        UPLOAD_RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
                               --upload-file "$file" \
                               "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/uploads")
        URL=$(echo "$UPLOAD_RESPONSE" | jq -r ".url")
        NAME=$(basename "$file")
        curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
             --data "name=$NAME" \
             --data "url=${CI_PROJECT_URL}${URL}" \
             "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases/${NEXT_RELEASE_VERSION}/assets/links"
      done
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'